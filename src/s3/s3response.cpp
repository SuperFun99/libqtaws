/*
    Copyright 2015 Mike Kuta

    This file is part of libqtaws.

    Libqtaws is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Libqtaws is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with libqtaws.  If not, see <http://www.gnu.org/licenses/>.
*/


#include "s3response.h"
#include "s3response_p.h"

#include <QDebug>
#include <QXmlStreamReader>

QTAWS_BEGIN_NAMESPACE

/**
 * @class  S3Response
 *
 * @brief  Interface class for processing S3 responses
 */


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief  Constructs a new S3Response object.
 *
 * @param  parent  This object's parent.
 */
S3Response::S3Response(QObject * const parent)
    : AwsAbstractResponse(new S3ResponsePrivate(this), parent)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @internal
 *
 * @brief  Constructs a new S3Response object.
 *
 *
 * This overload allows derived classes to provide their own private class
 * implementation that inherits from S3RequestPrivate.
 *
 * @param  d       Pointer to private data (aka D-Pointer).
 * @param  parent  This object's parent.
 */
S3Response::S3Response(S3ResponsePrivate * const d, QObject * const parent)
    : AwsAbstractResponse(d, parent)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief Get this response's error string.
 *
 * This override checks for S3 service errors, and if found, returns the first
 * one.  Otherwise, this override delegates to the base implementation (which
 * checks for network and XML parse errors, for example).
 *
 * Also consider using the serviceErrors function to retrieve all of the server
 * errors (if any), not just the first one (though often S3 will only return
 * one error per response).
 *
 * @return  An error string, or a null QString if this response has no errors.
 *
 * @see  AwsAbstractResponse::errorString
 * @see  hasError
 * @see  serviceErrors
 */
QString S3Response::errorString() const
{
    Q_D(const S3Response);
    return (d->errors.empty()) ? AwsAbstractResponse::errorString() : d->errors.first().message();
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool S3Response::hasError() const
{
    Q_D(const S3Response);
    return ((!d->errors.isEmpty()) || (AwsAbstractResponse::hasError()));
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool S3Response::isValid() const
{
    Q_D(const S3Response);
    return ((d->errors.isEmpty()) && (AwsAbstractResponse::isValid()));
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief  Get the S3 request ID, if any, included in the S3 response.
 *
 * @return S3 request ID, or a null QString if not found.
 */
QString S3Response::requestId() const
{
    Q_D(const S3Response);
    return d->requestId;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief  Get the special token that helps AWS troubleshoot problems.
 *
 * @return Value of \a x-amz-id-2 header, or a null QString if not found.
 */
QString S3Response::amzId2() const
{
    Q_D(const S3Response);
    return d->amzId2;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief  Get list of S3 errors, if any, included in the S3 response.
 *
 * @return A (possibly empty) list of S3 errors found in the S3 response.
 *
 * @see errorString
 */
S3ErrorList S3Response::serviceErrors() const
{
    Q_D(const S3Response);
    return d->errors;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void S3Response::parse(QNetworkReply * const reply)
{
    // DEBUGGING
    // Dump reply headers
    QList<QByteArray> headers = reply->rawHeaderList();
    qDebug() <<  "========= Reply Headers ========\n";
    foreach (QByteArray header, headers)
    {
        qDebug() << QString::fromLatin1("%1: %2\n").arg(QString::fromLatin1(header)).arg(QString::fromLatin1(reply->rawHeader(header)));
    }

    // Dump the reply body
    qDebug() <<  "========= Reply Body ========\n";
    qDebug() << reply->readAll().constData();
    qDebug() << "\n";



    // Extract common response values from headers
    Q_D(S3Response);
    d->amzId2    = QString::fromLatin1(reply->rawHeader("x-amz-id-2"));
    d->requestId = QString::fromLatin1(reply->rawHeader("x-amz-request-id"));


    // Parse the body
    if (isSuccess(reply))
        parseSuccess(*reply);
    else
        parseFailure(*reply);
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QNetworkReply * S3Response::networkReply() const
{
    Q_D(const S3Response);
    return d->reply;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief  Parse a failure response.
 *
 * This implementation parses an S3 Error element.
 *
 * For example:
 * @code{xml}
 * <?xml version="1.0" encoding="UTF-8"?>
 * <Error>
 *   <Code>NoSuchKey</Code>
 *   <Message>The resource you requested does not exist</Message>
 *   <Resource>/mybucket/myfoto.jpg</Resource>
 *   <RequestId>4442587FB7D0A2F9</RequestId>
 * </Error>
 * @endcode
 *
 * @param  response  Response to parse.
 *
 * @see http://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html
 */
void S3Response::parseFailure(QIODevice & response)
{
    Q_D(S3Response);
    QXmlStreamReader xml(&response);
    if (xml.readNextStartElement())
    {
        if (xml.name() == QLatin1String("Error"))
        {
            d->parseError(xml);
        }
        else
        {
            qWarning() << "ignoring" << xml.name();
            xml.skipCurrentElement();
        }
    }

    setXmlError(xml);
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void S3Response::parseSuccess(QIODevice & /*response*/)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3ResponsePrivate::S3ResponsePrivate(S3Response * const q)
    : AwsAbstractResponsePrivate(q)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <?xml version="1.0" encoding="UTF-8"?>
/// <Error>
///   <Code>NoSuchKey</Code>
///   <Message>The resource you requested does not exist</Message>
///   <Resource>/mybucket/myfoto.jpg</Resource>
///   <RequestId>4442587FB7D0A2F9</RequestId>
/// </Error>
///
void S3ResponsePrivate::parseError(QXmlStreamReader & xml)
{
    Q_ASSERT(xml.name() == QLatin1String("Error"));
    while (xml.readNextStartElement())
    {
        errors.append(S3Error(xml));
    }
}


QTAWS_END_NAMESPACE
