/*
    Copyright 2015 Mike Kuta

    This file is part of libqtaws.

    Libqtaws is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Libqtaws is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with libqtaws.  If not, see <http://www.gnu.org/licenses/>.
*/


#include "s3storageclass.h"
#include "s3storageclass_p.h"

#include <QDebug>


#define STORAGE_CLASS_STANDARD            QLatin1String("STANDARD")
#define STORAGE_CLASS_REDUCED_REDUNDANCY  QLatin1String("REDUCED_REDUNDANCY")
#define STORAGE_CLASS_GLACIER             QLatin1String("GLACIER")


QTAWS_BEGIN_NAMESPACE



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3StorageClass::S3StorageClass(const S3StorageClass::Value & storageClass)
    : d_ptr(new S3StorageClassPrivate(storageClass, this))
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3StorageClass::S3StorageClass(const S3StorageClass & other)
    : d_ptr(new S3StorageClassPrivate(*other.d_ptr, this))
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3StorageClass::~S3StorageClass()
{
    delete d_ptr;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3StorageClass & S3StorageClass::operator=(const S3StorageClass & other)
{
    d_ptr->storageClass = other.d_ptr->storageClass;
    return *this;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString S3StorageClass::toString() const
{
    switch (d_ptr->storageClass)
    {
    case Standard:          return STORAGE_CLASS_STANDARD;
    case ReducedRedundancy: return STORAGE_CLASS_REDUCED_REDUNDANCY;
    case Glacier:           return STORAGE_CLASS_GLACIER;
    default:
        Q_ASSERT_X(false, Q_FUNC_INFO, qPrintable(QString::fromLatin1("Invalid storage class: %1").arg(d_ptr->storageClass)));
    }
    return QString();
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3StorageClass S3StorageClass::fromString(const QString & storageClass)
{
    if (storageClass.compare(STORAGE_CLASS_STANDARD,           Qt::CaseInsensitive)) return S3StorageClass::Standard;
    if (storageClass.compare(STORAGE_CLASS_REDUCED_REDUNDANCY, Qt::CaseInsensitive)) return S3StorageClass::ReducedRedundancy;
    if (storageClass.compare(STORAGE_CLASS_GLACIER,            Qt::CaseInsensitive)) return S3StorageClass::Glacier;
    qWarning() << "Unknown storage class" << storageClass;
    return S3StorageClass::OtherClass;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool S3StorageClass::isDefault() const
{
    return (d_ptr->storageClass == Standard);
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool S3StorageClass::operator==(const S3StorageClass & other) const
{
    return (d_ptr->storageClass == other.d_ptr->storageClass);
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3StorageClassPrivate::S3StorageClassPrivate(const int storageClass, S3StorageClass * const q)
    : storageClass(storageClass)
    , q_ptr(q)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3StorageClassPrivate::S3StorageClassPrivate(const S3StorageClassPrivate & other, S3StorageClass * const q)
    : storageClass(other.storageClass)
    , q_ptr(q)
{

}

QTAWS_END_NAMESPACE
