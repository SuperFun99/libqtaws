/*
    Copyright 2015 Mike Kuta

    This file is part of libqtaws.

    Libqtaws is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Libqtaws is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with libqtaws.  If not, see <http://www.gnu.org/licenses/>.
*/


#include "s3objectrequest.h"
#include "s3objectrequest_p.h"

#include <QCryptographicHash>


QTAWS_BEGIN_NAMESPACE



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3ObjectRequest::S3ObjectRequest(const S3Request::Action action, const QString & bucketName, const QString & s3ObjectName)
    : S3Request(new S3ObjectRequestPrivate(action, bucketName, s3ObjectName, this))
{
    setBucketName(bucketName);
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3ObjectRequest::S3ObjectRequest(const S3ObjectRequest & other)
    : S3Request(new S3ObjectRequestPrivate(*other.d_func(), this))
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3ObjectRequest & S3ObjectRequest::operator=(const S3ObjectRequest & other)
{
    Q_D(S3ObjectRequest);
    S3Request::operator =(other);
    d->s3ObjectName = other.d_func()->s3ObjectName;
    return *this;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool S3ObjectRequest::isValid() const
{
    return ((!s3ObjectName().isEmpty()) && (S3Request::isValid()));
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString S3ObjectRequest::s3ObjectName() const
{
    Q_D(const S3ObjectRequest);
    return d->s3ObjectName;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString S3ObjectRequest::mimeType() const
{
    Q_D(const S3ObjectRequest);
    return d->mimeType;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void S3ObjectRequest::setS3ObjectName(const QString & s3ObjectName)
{
    Q_D(S3ObjectRequest);
    d->s3ObjectName = s3ObjectName;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void S3ObjectRequest::setMimeType(const QString & mimeType)
{
    Q_D(S3ObjectRequest);
    d->mimeType = mimeType;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool S3ObjectRequest::operator==(const S3ObjectRequest & other) const
{
    return ((s3ObjectName() == other.s3ObjectName()) &&
            (S3Request::operator ==(other)));
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3ObjectRequest::S3ObjectRequest(S3ObjectRequestPrivate * const d)
    : S3Request(d)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QNetworkRequest S3ObjectRequest::unsignedRequest(const QUrl & endpoint) const
{
    // The base class sets the host name
    QNetworkRequest req = S3Request::unsignedRequest(endpoint);

    // Add the object name to the request URL
    QUrl url = req.url();
    url.setPath(url.path() + QLatin1String("/") + s3ObjectName());
    req.setUrl(url);

    return req;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3ObjectRequestPrivate::S3ObjectRequestPrivate(const S3Request::Action action, const QString & bucketName, const QString & s3ObjectName, S3ObjectRequest * const q)
    : S3RequestPrivate(action, bucketName, q)
    , s3ObjectName(s3ObjectName)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3ObjectRequestPrivate::S3ObjectRequestPrivate(const S3ObjectRequestPrivate & other, S3ObjectRequest * const q)
    : S3RequestPrivate(other, q)
    , s3ObjectName(other.s3ObjectName)
    , mimeType(other.mimeType)
{

}


QTAWS_END_NAMESPACE
