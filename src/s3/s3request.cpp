// S3Request.cpp
// By Mike Kuta
// Thursday, August 20, 2015
//
// Base class for Amazon S3 requests.
//
// Extension of libqtaws.  libqtaws is licensed under the GNU Lesser General Public License.
//
// https://github.com/pcolby/libqtaws
//
// Copyright Â© 2015 Kuta Software LLC.  All rights reserved.


#include "s3request.h"
#include "s3request_p.h"

//#include "s3error.h"  // To do - write this

#include <QNetworkRequest>


QTAWS_BEGIN_NAMESPACE




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3Request::S3Request(const Action action, const QString & bucketName)
    : AwsAbstractRequest(new S3RequestPrivate(action, bucketName, this))
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3Request::S3Request(const S3Request & other)
    : AwsAbstractRequest(new S3RequestPrivate(*other.d_func(), this))
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3Request & S3Request::operator=(const S3Request & other)
{
    Q_D(S3Request);
    AwsAbstractRequest::operator =(other);
    d->action = other.d_func()->action;
    d->apiVersion = other.d_func()->apiVersion;
    d->bucketName = other.d_func()->bucketName;
    return *this;
}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool S3Request::isValid() const
{
    // This could be more robust.
    return !bucketName().isEmpty();
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3Request::S3Request(S3RequestPrivate * const d)
    : AwsAbstractRequest(d)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3Request::Action S3Request::action() const
{
    Q_D(const S3Request);
    return d->action;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString S3Request::actionString() const
{
    return S3RequestPrivate::toString(action());
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString S3Request::apiVersion() const
{
    Q_D(const S3Request);
    return d->apiVersion;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString S3Request::bucketName() const
{
    Q_D(const S3Request);
    return d->bucketName;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3Request::RequestStyle S3Request::requestStyle() const
{
    Q_D(const S3Request);
    return d->requestStyle;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void S3Request::setAction(const S3Request::Action action)
{
    Q_D(S3Request);
    d->action = action;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void S3Request::setApiVersion(const QString & version)
{
    Q_D(S3Request);
    d->apiVersion = version;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void S3Request::setBucketName(const QString & bucketName)
{
    Q_D(S3Request);
    d->bucketName = bucketName;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void S3Request::setRequestStyle(S3Request::RequestStyle requestStyle)
{
    Q_D(S3Request);
    d->requestStyle = requestStyle;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool S3Request::operator==(const S3Request & other) const
{
    return ((action() == other.action()) &&
            apiVersion() == other.apiVersion() &&
            bucketName() == other.bucketName() &&
            (AwsAbstractRequest::operator ==(other)));
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QNetworkRequest S3Request::unsignedRequest(const QUrl & endpoint) const
{
    QUrl url = endpoint;

    if (requestStyle() == VirtualHostedStyle)
    {
        // http://BUCKET-NAME.s3.amazonaws.com/OBJECT-NAME
        url.setHost(bucketName() + "." + url.host());

        if (bucketName() != bucketName().toLower())
            qWarning() << "Virtual hosted-style requests will fail when bucket name is not all lowercase (bucket = " << bucketName() << ")";
    }
    else
    {
        // http://s3.amazonaws.com/BUCKET-NAME/OBJECT-NAME
        url.setPath(url.path() + "/" + bucketName());
    }
    return QNetworkRequest(url);
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3RequestPrivate::S3RequestPrivate(const S3Request::Action action, const QString & bucketName, S3Request * const q)
    : AwsAbstractRequestPrivate(q)
    , action(action)
    , requestStyle(S3Request::VirtualHostedStyle)
    , apiVersion(QLatin1String("2006-03-01"))
    , bucketName(bucketName)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
S3RequestPrivate::S3RequestPrivate(const S3RequestPrivate & other, S3Request * const q)
    : AwsAbstractRequestPrivate(q)
    , action(other.action)
    , requestStyle(other.requestStyle)
    , apiVersion(other.apiVersion)
    , bucketName(other.bucketName)
{

}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
QString S3RequestPrivate::toString(const S3Request::Action & action)
{
    #define ActionToString(action) \
        case S3Request::action##Action: return QString(#action)

    switch (action)
    {
        ActionToString(PutObject);
    default:
            Q_ASSERT_X(false, Q_FUNC_INFO, "Invalid action");
    }

    #undef ActionToString
    return "";
}


QTAWS_END_NAMESPACE
